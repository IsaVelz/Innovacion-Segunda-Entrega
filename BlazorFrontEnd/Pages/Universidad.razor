@page "/universidad"
@using BlazorFrontEnd.Services
@inject ApiService ServicioApi
@inject IJSRuntime ServicioJS
<div class="container-xl">
    <div class="table-responsive">
        <div class="table-wrapper">
            <div class="table-title">
                <div class="row">
                    <div class="col-sm-6">
                        <h2>Gestionar <b>Universidades</b></h2>
                    </div>
                    <div class="col-sm-6">
                        <a href="#modalAgregarUniversidad" class="btn btn-outline-dark" data-bs-toggle="modal" @onclick="() => PrepararParaAgregarOEditar()">
                            <i class="material-icons">&#xE147;</i> <span>Añadir Nueva Universidad</span>
                        </a>
                        <!-- Botón que abre el modal para añadir una nueva persona -->

                        <a href="#modalConsultarUniversidad" class="btn btn-outline-dark" data-bs-toggle="modal" @onclick="PrepararParaConsulta">
                            <i class="material-icons">&#xE8B6;</i> <span>Consultar Universidad</span>
                        </a>
                        <!-- Botón que abre el modal para consultar una persona existente -->
                    </div>
                </div>
            </div>
            @if (universidades == null)
            {
                <p>Cargando...</p>
                <!-- Muestra un mensaje mientras se cargan los datos -->
            }
            else if (!universidades.Any())
            {
                <p>No hay Universidades registradas.</p>
                <!-- Muestra un mensaje si no hay personas en la lista -->
            }
            else
            {
                <!-- Muestra la tabla con la lista de personas si la lista contiene datos -->
                <table class="table table-striped table-hover">
                    <thead>
                        <tr>
                            <th>Id</th>
                            <th>Nombre</th>
                            <th>Tipo</th>
                            <th>Ciudad</th>
                            <th>Acciones</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var universidad in universidades)
                        {
                            <tr>
                                <td>@universidad["id"]</td>
                                <!-- Muestra el código de la persona -->
                                <td>@universidad["nombre"]</td>
                                <!-- Muestra el nombre de la persona -->
                                <td>@universidad["tipo"]</td>
                                <!-- Muestra el email de la persona -->
                                <td>@universidad["ciudad"]</td>
                                <!-- Muestra el teléfono de la persona -->
                                <td>
                                    <a href="#modalAgregarUniversidad" class="edit" data-bs-toggle="modal" @onclick="() => PrepararParaEditar(universidad)">
                                        <i class="material-icons" data-bs-toggle="tooltip" title="Editar">&#xE254;</i>
                                    </a>
                                    <!-- Botón para editar la persona -->
                                  <a href="#modalEliminarUniversidad" class="delete" data-bs-toggle="modal" @onclick="() => AsignarUniversidadParaEliminar(universidad)">
                                        <i class="bi bi-trash3" data-bs-toggle="tooltip" title="Eliminar">&#xE872;</i>
                                    </a>
                                    <!-- Botón para eliminar la persona -->
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        </div>
    </div>
</div>

<!-- Modal para Añadir/Editar Persona -->
<div class="modal fade" id="modalAgregarUniversidad" tabindex="-1" role="dialog" aria-labelledby="modalAgregarUniversidadLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <EditForm Model="@universidadActual" OnValidSubmit="GuardarUniversidad">
                <DataAnnotationsValidator />
                <!-- Valida los campos del formulario usando anotaciones de datos en C# -->
                <div class="modal-header">
                    <h5 class="modal-title" id="modalAgregarUniversidadLabel">@(esNuevaUniversidad? "Añadir" : "Editar") Universidad</h5>
                    <!-- El título del modal cambia según si se está añadiendo o editando una persona -->
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <!-- Campos del formulario para ingresar los datos de la persona -->
                    <div class="form-group">
                        <label>Id</label>
                        <InputText class="form-control" @bind-Value="id" />
                        <ValidationMessage For="@(() => id)" />
                        <!-- Campo para ingresar el código de la persona -->
                    </div>
                    <div class="form-group">
                        <label>Nombre</label>
                        <InputText class="form-control" @bind-Value="nombre" />
                        <ValidationMessage For="@(() => nombre)" />
                        <!-- Campo para ingresar el nombre de la persona -->
                    </div>
                    <div class="form-group">
                        <label>Tipo</label>
                        <InputText class="form-control" @bind-Value="tipo" />
                        <ValidationMessage For="@(() => tipo)" />
                        <!-- Campo para ingresar el email de la persona -->
                    </div>
                    <div class="form-group">
                        <label>Ciudad</label>
                        <InputText class="form-control" @bind-Value="ciudad" />
                        <ValidationMessage For="@(() => ciudad)" />
                        <!-- Campo para ingresar el teléfono de la persona -->
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                    <button type="submit" class="btn btn-primary">@(esNuevaUniversidad ? "Añadir" : "Guardar")</button>
                    <!-- Botón de acción que cambia según si se está añadiendo o guardando -->
                </div>
            </EditForm>
        </div>
    </div>
</div>

<!-- Modal para Eliminar Persona -->
<div class="modal fade" id="modalEliminarUniversidad" tabindex="-1" role="dialog" aria-labelledby="modalEliminarUniversidadLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="modalEliminarUniversidadLabel">Eliminar Universidad</h5>
                <!-- Título del modal para eliminar una persona -->
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>¿Está seguro de que desea marcar esta Universidad como inactiva?</p>
                <p class="text-warning"><small>Esta acción no se puede deshacer.</small></p>
                <!-- Mensaje de advertencia para la eliminación -->
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                <button type="button" class="btn btn-danger" @onclick="EliminarUniversidad">Eliminar</button>
                <!-- Botón para confirmar la eliminación de la persona -->
            </div>
        </div>
    </div>
</div>

<!-- Modal para Consultar Persona -->
<div class="modal fade" id="modalConsultarUniversidad" tabindex="-1" role="dialog" aria-labelledby="modalConsultarUniversidadLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="modalConsultarUniversidadLabel">Consultar Universidad</h5>
                <!-- Título del modal para consultar una persona -->
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <!-- Campos para ingresar el código y mostrar la información de la persona consultada -->
                <div class="form-group">
                    <label>Código</label>
                    <input type="text" class="form-control" @bind="consultaId" @bind:event="oninput" />
                    <!-- Campo para ingresar el código de la persona a consultar -->
                </div>
                <div class="form-group">
                    <label>Nombre</label>
                    <input type="text" class="form-control" @bind="consultaNombre" readonly />
                    <!-- Campo para mostrar el nombre de la persona consultada, es de solo lectura -->
                </div>
                <div class="form-group">
                    <label>Tipo</label>
                    <input type="text" class="form-control" @bind="consultaTipo" readonly />
                    <!-- Campo para mostrar el email de la persona consultada, es de solo lectura -->
                </div>
                <div class="form-group">
                    <label>Ciudad</label>
                    <input type="text" class="form-control" @bind="consultaCiudad" readonly />
                    <!-- Campo para mostrar el teléfono de la persona consultada, es de solo lectura -->
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
                <button type="button" class="btn btn-primary" @onclick="ConsultarUniversidad">Consultar</button>
                <!-- Botón para realizar la consulta de la persona con el código ingresado -->
                <button type="button" class="btn btn-warning" @onclick="ModificarUniversidadConsultada" disabled="@(!universidadEncontrada)">Modificar</button>
                <!-- Botón para modificar la persona consultada si fue encontrada -->
                <button type="button" class="btn btn-danger" @onclick="EliminarUniversidadConsultada" disabled="@(!universidadEncontrada)">Eliminar</button>
                <!-- Botón para eliminar la persona consultada si fue encontrada -->
            </div>
        </div>
    </div>
</div>

@code {
    private List<Dictionary<string, object>> universidades = new List<Dictionary<string, object>>();
    // Lista que almacena las personas obtenidas desde la API
    
    private Dictionary<string, object> universidadActual = new Dictionary<string, object>();
    // Diccionario que representa la persona actual que se está añadiendo o editando

    private bool esNuevaUniversidad = true;
    // Bandera que indica si se está añadiendo una nueva persona o editando una existente

    private bool universidadEncontrada = false;
    // Bandera que indica si una persona fue encontrada durante la consulta

    private string id = "";
    // Variable que almacena el código de la persona durante la edición o creación

    private string nombre = "";
    // Variable que almacena el nombre de la persona durante la edición o creación

    private string tipo = "";
    // Variable que almacena el email de la persona durante la edición o creación

    private string ciudad = "";
    // Variable que almacena el teléfono de la persona durante la edición o creación

    private string consultaId = "";
    // Variable que almacena el código de la persona que se va a consultar

    private string consultaNombre = "";
    // Variable que almacena el nombre de la persona que se encontró durante la consulta

    private string consultaTipo = "";
    // Variable que almacena el email de la persona que se encontró durante la consulta

    private string consultaCiudad = "";
    // Variable que almacena el teléfono de la persona que se encontró durante la consulta

    protected override async Task OnInitializedAsync()
    {
        await CargarUniversidades();
        // Método que se ejecuta al inicializar el componente. Carga la lista de personas desde la API.
    }

    private async Task CargarUniversidades()
    {
        try
        {
            universidades = await ServicioApi.GetDataAsync("api/proyecto/universidad");
            universidades = universidades.Where(u => (bool)(u["IsDeleted"] ?? false)).ToList(); // Filtra solo las activas

            // Llama a la API para obtener la lista de personas y la almacena en la variable 'personas'.
            StateHasChanged();
            // Fuerza la actualización de la UI después de cargar los datos.
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar universidades: {ex.Message}");
            // Muestra un error en la consola si la carga de personas falla.
            await ServicioJS.InvokeVoidAsync("alert", "Error al cargar universidades. Por favor, intente nuevamente.");
            // Muestra una alerta en la página indicando que hubo un error al cargar las personas.
        }
    }

    private void PrepararParaAgregarOEditar(Dictionary<string, object>? universidad = null)
    {
        esNuevaUniversidad = universidad == null;
        // Si 'persona' es null, significa que estamos añadiendo una nueva persona. De lo contrario, estamos editando.
        universidadActual = universidad ?? new Dictionary<string, object>();
        // Si 'persona' es null, inicializamos un nuevo diccionario. De lo contrario, usamos el diccionario de la persona seleccionada.

        id = universidadActual.TryGetValue("id", out var c) ? c?.ToString() ?? "" : "";
        nombre = universidadActual.TryGetValue("nombre", out var n) ? n?.ToString() ?? "" : "";
        tipo = universidadActual.TryGetValue("tipo", out var e) ? e?.ToString() ?? "" : "";
        ciudad = universidadActual.TryGetValue("ciudad", out var t) ? t?.ToString() ?? "" : "";
        // Extrae los valores de 'codigo', 'nombre', 'email' y 'telefono' de 'personaActual' y los asigna a las variables correspondientes.
        if(esNuevaUniversidad) {
            ServicioJS.InvokeVoidAsync("hideModal", "modalAgregarUniversidad");
        } else {
            ServicioJS.InvokeVoidAsync("showModal", "modalAgregarUniversidad");
        }
        // Muestra el modal para añadir o editar persona usando JavaScript.
    }

    private void PrepararParaEditar(Dictionary<string, object>? universidad = null)
    {
        esNuevaUniversidad = universidad == null;
        // Si 'persona' es null, significa que estamos añadiendo una nueva persona. De lo contrario, estamos editando.
        universidadActual = universidad ?? new Dictionary<string, object>();
        // Si 'persona' es null, inicializamos un nuevo diccionario. De lo contrario, usamos el diccionario de la persona seleccionada.

        id = universidadActual.TryGetValue("id", out var c) ? c?.ToString() ?? "" : "";
        nombre = universidadActual.TryGetValue("nombre", out var n) ? n?.ToString() ?? "" : "";
        tipo = universidadActual.TryGetValue("tipo", out var e) ? e?.ToString() ?? "" : "";
        ciudad = universidadActual.TryGetValue("ciudad", out var t) ? t?.ToString() ?? "" : "";
        // Extrae los valores de 'codigo', 'nombre', 'email' y 'telefono' de 'personaActual' y los asigna a las variables correspondientes.
        
        ServicioJS.InvokeVoidAsync("hideModal", "modalAgregarUniversidad");
        // Esconde el modal para editar persona usando JavaScript.
    }

    private void PrepararParaConsulta()
    {
        consultaId = "";
        consultaNombre = "";
        consultaTipo = "";
        consultaCiudad = "";
        universidadEncontrada = false;
        // Limpia los campos de consulta y establece 'personaEncontrada' en false.
    }

private void AsignarUniversidadParaEliminar(Dictionary<string, object> universidad)
{
    universidadActual = universidad;
    // Aquí asegúrate de que todos los datos de la persona seleccionada se estén asignando correctamente
    Console.WriteLine($"Universidad seleccionada para eliminar: Id: {universidadActual["id"]}, Nombre: {universidadActual["nombre"]}");
    
    ServicioJS.InvokeVoidAsync("showModal", "modalEliminarUniversidad");
    // Muestra el modal para confirmar la eliminación usando JavaScript.
}


    private async Task GuardarUniversidad()
    {
        try
        {
            universidadActual["id"] = id;
            universidadActual["nombre"] = nombre;
            universidadActual["tipo"] = tipo;
            universidadActual["ciudad"] = ciudad;
            // Actualiza 'personaActual' con los valores actuales de los campos de entrada.

            bool exito;
            if (esNuevaUniversidad)
            {
                exito = await ServicioApi.AddEntityAsync("api/proyecto/universidad", universidadActual);
                // Si estamos añadiendo una nueva persona, llama a la API para añadir la nueva persona.
            }
            else
            {
                exito = await ServicioApi.EditEntityAsync("api/proyecto/universidad/id", id, universidadActual);
                // Si estamos editando una persona existente, llama a la API para editarla.
            }

            if (exito)
            {
                await ServicioJS.InvokeVoidAsync("hideModal", "modalAgregarUniversidad");
                // Si la operación tiene éxito, cierra el modal.

                await CargarUniversidades();
                // Recarga la lista de personas para reflejar los cambios.

                id = nombre = tipo = ciudad = string.Empty;
                universidadActual = new Dictionary<string, object>();
                esNuevaUniversidad = true;
                // Limpia los campos del formulario y restablece el estado.

                StateHasChanged();
                // Fuerza la actualización de la UI.

                await ServicioJS.InvokeVoidAsync("alert", "Operación realizada con éxito.");
                // Muestra un mensaje de éxito al usuario.
            }
            else
            {
                await ServicioJS.InvokeVoidAsync("alert", "Error al guardar la universidad.Por favor, intente nuevamente.");
                // Si la operación falla, muestra un mensaje de error.
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al guardar universidad: {ex.Message}");
            await ServicioJS.InvokeVoidAsync("alert", "Error al guardar la universidad. Por favor, intente nuevamente.");
            // Muestra un error en la consola y una alerta si hay una excepción durante el guardado.
        }
    }

private async Task EliminarUniversidad()
{
    try
    {
        if (universidadActual.TryGetValue("id", out var idObj) && idObj is string idStr)
        {
            universidadActual["IsDeleted"] = true; // Cambia el estado a no activo
            bool exito = await ServicioApi.DeleteEntityAsync($"api/proyecto/universidad/id",idStr);
            if (exito)
            {
                await ServicioJS.InvokeVoidAsync("hideModal", "modalEliminarUniversidad");
                await CargarUniversidades();
                await ServicioJS.InvokeVoidAsync("alert", "Universidad eliminada con éxito.");
            }
            else
            {
                await ServicioJS.InvokeVoidAsync("alert", "Error al eliminar la universidad. Por favor, intente nuevamente.");
            }
        }
    }
    catch (Exception ex)
    {
        Console.WriteLine($"Error al eliminar universidad: {ex.Message}");
        await ServicioJS.InvokeVoidAsync("alert", "Error al eliminar la universidad. Por favor, intente nuevamente.");
    }
}


    private async Task ConsultarUniversidad()
    {
        try
        {
            var resultado = await ServicioApi.GetDataAsync($"api/proyecto/universidad/id/{consultaId}");
            if (resultado.Any())
            {
                var universidadConsultada = resultado.First();
                consultaNombre = universidadConsultada["nombre"]?.ToString() ?? "";
                consultaTipo = universidadConsultada["tipo"]?.ToString() ?? "";
                consultaCiudad = universidadConsultada["ciudad"]?.ToString() ?? "";
                universidadEncontrada = true;
                // Si se encuentra una persona con el código consultado, muestra los datos en los campos correspondientes.
            }
            else
            {
                consultaNombre = "";
                consultaTipo = "";
                consultaCiudad = "";
                universidadEncontrada = false;
                await ServicioJS.InvokeVoidAsync("alert", "No se encontró ninguna universidad con ese id.");
                // Si no se encuentra ninguna persona, limpia los campos y muestra un mensaje de alerta.
            }
            StateHasChanged();
            // Fuerza la actualización de la UI para reflejar los cambios.
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al consultar universidad: {ex.Message}");
            await ServicioJS.InvokeVoidAsync("alert", "Error al consultar la universidad. Por favor, intente nuevamente.");
            // Muestra un error en la consola y una alerta si hay una excepción durante la consulta.
        }
    }

    private async Task ModificarUniversidadConsultada()
    {
        PrepararParaAgregarOEditar(new Dictionary<string, object>
        {
            ["id"] = consultaId,
            ["nombre"] = consultaNombre,
            ["tipo"] = consultaTipo,
            ["ciudad"] = consultaCiudad
        });
        await ServicioJS.InvokeVoidAsync("hideModal", "modalConsultarUniversidad");
        // Prepara los datos consultados para la edición y cierra el modal de consulta.
    }

    private async Task EliminarUniversidadConsultada()
    {
        AsignarUniversidadParaEliminar(new Dictionary<string, object>
        {
            ["id"] = consultaId,
            ["nombre"] = consultaNombre,
            ["tipo"] = consultaTipo,
            ["ciudad"] = consultaCiudad
        });
        await ServicioJS.InvokeVoidAsync("hideModal", "modalConsultarUniversidad");
        // Prepara los datos consultados para la eliminación y cierra el modal de consulta.
    }
}
